<?xml version="1.0" encoding="UTF-8"?><process version="8.2.000">
  <context>
    <input/>
    <output/>
    <macros/>
  </context>
  <operator activated="true" class="process" compatibility="8.2.000" expanded="true" name="Process">
    <parameter key="logverbosity" value="init"/>
    <parameter key="random_seed" value="2001"/>
    <parameter key="send_mail" value="never"/>
    <parameter key="notification_email" value=""/>
    <parameter key="process_duration_for_mail" value="30"/>
    <parameter key="encoding" value="SYSTEM"/>
    <process expanded="true">
      <operator activated="true" class="read_excel" compatibility="8.2.000" expanded="true" height="68" name="Read Excel" width="90" x="45" y="85">
        <parameter key="excel_file" value="D:\work\docs\City of Aspen Appendix E.xlsx"/>
        <parameter key="sheet_selection" value="sheet number"/>
        <parameter key="sheet_number" value="1"/>
        <parameter key="imported_cell_range" value="A1"/>
        <parameter key="encoding" value="SYSTEM"/>
        <parameter key="first_row_as_names" value="true"/>
        <list key="annotations"/>
        <parameter key="date_format" value=""/>
        <parameter key="time_zone" value="SYSTEM"/>
        <parameter key="locale" value="English (United States)"/>
        <parameter key="read_all_values_as_polynominal" value="false"/>
        <list key="data_set_meta_data_information"/>
        <parameter key="read_not_matching_values_as_missings" value="true"/>
        <parameter key="datamanagement" value="double_array"/>
        <parameter key="data_management" value="auto"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="7.4.000" expanded="true" height="82" name="Execute Python (2)" width="90" x="179" y="85">
        <parameter key="script" value="import pandas&#10;import nltk&#10;from nltk.tree import *&#10;import nltk.data&#10;import nltk.draw&#10;&#10;import math&#10;import os&#10;import sys&#10;import parser&#10;import numpy as np&#10;&#10;from nltk import pos_tag&#10;from nltk.corpus import stopwords&#10;from nltk import sent_tokenize, word_tokenize&#10;&#10;from nltk.internals import find_jars_within_path&#10;from nltk.parse.stanford import StanfordParser&#10;&#10;stop_words = set(stopwords.words('english'))&#10;stop_words.add('ability')&#10;stop_words.add('Ability')&#10;stop_words.add('\'s')&#10;stop_words.add('etc.')&#10;stop_words.add('e.g.')&#10;stop_words.add('i.e.')&#10;&#10;   &#10;class SVO(object):&#10;    &quot;&quot;&quot;&#10;    Class Methods to Extract Subject Verb Object Tuples from a Sentence&#10;    &quot;&quot;&quot;&#10;        &#10;    def __init__(self):&#10;        &quot;&quot;&quot;&#10;        Initialize the SVO Methods&#10;        &quot;&quot;&quot;&#10;        &#10;        self.noun_types = [&quot;NN&quot;, &quot;NNP&quot;, &quot;NNPS&quot;,&quot;NNS&quot;,&quot;PRP&quot;]&#10;        self.verb_types = [&quot;VB&quot;,&quot;VBD&quot;,&quot;VBG&quot;,&quot;VBN&quot;, &quot;VBP&quot;, &quot;VBZ&quot;]&#10;        self.adjective_types = [&quot;JJ&quot;,&quot;JJR&quot;,&quot;JJS&quot;]&#10;        self.adverb_types = [&quot;RB&quot;,&quot;RBR&quot;,&quot;RBS&quot;,&quot;RP&quot;]&#10;        self.conjunction_types = [&quot;CC&quot;]&#10;        self.pred_verb_phrase_siblings = None&#10;        self.parser = StanfordParser()&#10;        self.sent_detector = nltk.data.load('tokenizers/punkt/english.pickle')&#10;        &#10;&#10;    def get_attributes(self, node, parent_node, parent_node_siblings):&#10;        &quot;&quot;&quot;&#10;        returns the Attributes for a Node&#10;        &quot;&quot;&quot;  &#10;                     &#10;&#10;    def get_subject(self, sub_tree):&#10;        &quot;&quot;&quot;&#10;        Returns the Subject and all attributes for a subject, sub_tree is a Noun Phrase&#10;        &quot;&quot;&quot;&#10;        sub_nodes = []&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        subject = []&#10;&#10;        for each in sub_nodes:&#10;            if each.label() in self.noun_types:&#10;                leaves = each.leaves()&#10;                for sub in leaves:&#10;                    if sub not in stop_words:&#10;                        subject.append(each.leaves())&#10;                break&#10;&#10;        return {'subject':subject}&#10;&#10;    def get_object(self, sub_tree):&#10;        &quot;&quot;&quot;&#10;        Returns an Object with all attributes of an object&#10;        &quot;&quot;&quot;&#10;        sub_nodes = []&#10;        siblings = self.pred_verb_phrase_siblings&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        Object = []&#10;        adjective = []&#10;&#10;        for each in sub_nodes:&#10;            if each.label() in self.noun_types:&#10;                leaves = each.leaves()&#10;                for obj in leaves:&#10;                    if obj not in stop_words:&#10;                        Object.append(each.leaves())&#10;                break&#10;       &#10;        self.pred_verb_phrase_siblings = None&#10;        return {'object':Object}&#10;    &#10;    def get_adverb(self, sub_tree):&#10;        &quot;&quot;&quot;&#10;        Returns the Adverb and all its attributes&#10;        &quot;&quot;&quot;&#10;        sub_nodes = []&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        adverb = []&#10;&#10;        for each in sub_nodes:&#10;            if each.label() in self.adverb_types:&#10;                leaves = each.leaves()&#10;                for sub in leaves:&#10;                    if sub not in stop_words:                        &#10;                        adverb.append(each.leaves())&#10;                break&#10;        &#10;        return {'adverb':adverb}&#10;        &#10;    def get_adjective(self, sub_tree):&#10;        &quot;&quot;&quot;&#10;        Returns an Adjective with all its attributes.&#10;        &quot;&quot;&quot;&#10;        sub_nodes = []&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        adjective = []&#10;&#10;        for each in sub_nodes:&#10;            if each.label() in self.adjective_types:&#10;                leaves = each.leaves()&#10;                for obj in leaves:&#10;                    if obj not in stop_words:&#10;                        if each.leaves() not in adjective:&#10;                           adjective.append(each.leaves())&#10;                break&#10;  &#10;        return {'adjective':adjective}&#10;    &#10;    def get_predicate(self, sub_tree , adjective):&#10;        &quot;&quot;&quot;&#10;        Returns the Verb along with its attributes, Also returns a Verb Phrase&#10;        &quot;&quot;&quot;&#10;&#10;        sub_nodes = []&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        predicate = []&#10;        adj = []&#10;        pred_verb_phrase_siblings = []&#10;        sub_tree  = ParentedTree.convert(sub_tree)&#10;        for each in sub_nodes:&#10;            if each.label() in self.verb_types:&#10;                sub_tree  = each&#10;                leaves = each.leaves()&#10;                for pre in leaves:&#10;                    if pre not in stop_words:&#10;                        predicate.append(each.leaves())&#10;            else:&#10;                if each.label() in self.adjective_types:&#10;                    sub_tree  = each                    &#10;                    adj1 = self.get_adjective(sub_tree)                    &#10;                    if adj1['adjective'] != []:&#10;                        adj.append(adj1['adjective'])       &#10;        &#10;        #get all predicate_verb_phrase_siblings to be able to get the object&#10;        sub_tree  = ParentedTree.convert(sub_tree)&#10;        if predicate:&#10;             pred_verb_phrase_siblings = self.tree_root.subtrees()&#10;             pred_verb_phrase_siblings = [each for each in pred_verb_phrase_siblings if each.label() in [&quot;NP&quot;,&quot;PP&quot;,&quot;ADJP&quot;,&quot;ADVP&quot;]]&#10;             self.pred_verb_phrase_siblings = pred_verb_phrase_siblings&#10;        &#10;        return {'predicate':predicate }, adj&#10;&#10;    def process_parse_tree(self, parse_tree):&#10;        &quot;&quot;&quot;&#10;        Returns the Subject-Verb-Object Representation of a Parse Tree.&#10;        Can Vary depending on number of 'sub-sentences' in a Parse Tree&#10;        &quot;&quot;&quot;&#10;        &#10;        self.tree_root = parse_tree&#10;        # Step 1 - Extract all the parse trees that start with 'S'&#10;        output_list = []     &#10;        output_dict = {}&#10;        &#10;        subject = {}&#10;        predicate = {}&#10;        Object = {}&#10;        adjective = {}&#10;        adverb ={}&#10;&#10;        for idx, subtree in enumerate(parse_tree[0].subtrees()):&#10;#            subtree.draw()      # show parse_tree of each sentence and subtree. &#10;               &#10;            if subtree.label() in [&quot;S&quot;, &quot;SQ&quot;, &quot;SBAR&quot;, &quot;SBARQ&quot;, &quot;SINV&quot;, &quot;FRAG&quot;]:&#10;                children_list = subtree&#10;                children_values = [each_child.label() for each_child in children_list]&#10;                children_dict = dict(zip(children_values,children_list))&#10;                subjct = {}&#10;                pre = {}&#10;                obj = {}                      &#10;                &#10;                # Extract Subject, Verb-Phrase, Objects, Adjective, Adverb from Sentence sub-trees&#10;                if children_dict.get(&quot;NP&quot;) is not None:                &#10;                    subjct = self.get_subject(children_dict[&quot;NP&quot;])&#10;                    if subjct:                       &#10;                        if subject == {} :&#10;                            subject.update({'subject':subjct['subject']})                       &#10;                        elif subject['subject']:                            &#10;                            UniqueSub = []                            &#10;                            for val in subjct['subject']:                                &#10;                                if val not in UniqueSub:                                &#10;                                    UniqueSub.append(val)&#10;                            &#10;                            for value in UniqueSub:                            &#10;                                if value not in subject['subject']:                                &#10;                                    subject['subject'].append(value)                        &#10;                        else:                            &#10;                            subject.update({'subject':subjct['subject']}) &#10;                                                               &#10;#                    print(&quot;Process Subject &quot;, subject)&#10;                    &#10;                    adjective = self.get_adjective(children_dict[&quot;NP&quot;])                         &#10;&#10;                if children_dict.get(&quot;VP&quot;) is not None:&#10;                                       &#10;                    pre, adj = self.get_predicate(children_dict[&quot;VP&quot;], adjective )                    &#10;                    if pre:                        &#10;                        UniquePre = []&#10;                        for val in pre['predicate']:                            &#10;                            if val not in UniquePre:                                &#10;                                UniquePre.append(val)                       &#10;                    &#10;                        if predicate == {}:&#10;                            predicate.update({'predicate': UniquePre})&#10;                        elif predicate['predicate']:&#10;                            for value in UniquePre:                                &#10;                                if value not in predicate['predicate']:                                        &#10;                                    predicate['predicate'].append(value)&#10;                        else:&#10;                            predicate.update({'predicate':UniquePre })                        &#10;                                     &#10;                    if adj:&#10;                        flattened = []&#10;                        for sublist in adj:&#10;                            for val in sublist:                                &#10;                                if val not in flattened:                                &#10;                                    flattened.append(val)                        &#10;                                                        &#10;                        if adjective == {}:                                               &#10;                            adjective.update({'adjective':flattened})&#10;                        elif adjective['adjective']:                           &#10;                            for value in flattened:  &#10;                                if value not in adjective['adjective']:                                    &#10;                                    adjective['adjective'].append(value)                           &#10;                        else:                           &#10;                            adjective.update({'adjective':flattened})&#10;                                            &#10;#                    print(&quot;Process predicate &quot;, predicate)&#10;#                    print(&quot;Process Adjective &quot;, adjective)&#10;                    &#10;                    obj = self.get_object(children_dict[&quot;VP&quot;])&#10;                    if obj:&#10;                        if Object == {}:&#10;                            Object.update({'object': obj['object']})&#10;                        elif Object['object']:&#10;                            UniqueObj = []                            &#10;                            for val in obj['object']:                                &#10;                                if val not in UniqueObj:                                &#10;                                    UniqueObj.append(val)&#10;                            for value in UniqueObj:                                &#10;                                if value not in Object['object']:                                        &#10;                                    Object['object'].append(value)                                      &#10;                        else:                            &#10;                            Object.update({'object': obj['object']})&#10;                    &#10;#                    print(&quot;Process Object &quot;, Object)&#10;                     &#10;                    adverb = self.get_adverb(children_dict[&quot;VP&quot;])&#10;#                    print(&quot;Process adverb &quot;, adverb)       &#10;             &#10;            try:                                                          &#10;                if subject :&#10;                    output_dict['subject'] = subject['subject']&#10;                else:&#10;                    output_dict['subject'] = &quot;&quot;                                                             &#10;                                   &#10;                if predicate:&#10;                    output_dict['predicate'] = predicate['predicate']                     &#10;              &#10;                if Object:                     &#10;                    output_dict['object'] = Object['object']                 &#10;                     &#10;                if adjective:            &#10;                    output_dict['adjective'] = adjective['adjective']&#10;&#10;                if adverb:            &#10;                    output_dict['adverb'] = adverb['adverb']               &#10;             &#10;                output_list.append(output_dict)&#10;                  &#10;            except Exception as e:&#10;                    print(&quot;Exception&quot;, e )&#10;                    continue&#10;        &#10;            &#10;        return output_list&#10;&#10;    def traverse(self,t):&#10;        try:&#10;            t.label()&#10;        except AttributeError:&#10;            print(t)&#10;        else:&#10;            # Now we know that t.node is defined&#10;            print('(', t.label())&#10;            for child in t:&#10;                traverse(child)&#10;&#10;            print(')')&#10;&#10;    def sentence_split(self,text):&#10;        &quot;&quot;&quot;&#10;        returns the Parse Tree of a Sample&#10;        &quot;&quot;&quot;&#10;        sentences = self.sent_detector.tokenize(text)&#10;        return sentences&#10;&#10;    def get_parse_tree(self, sentence):&#10;        &quot;&quot;&quot;&#10;        returns the Parse Tree of a Sample&#10;        &quot;&quot;&quot;&#10;        parse_tree = self.parser.raw_parse(sentence)&#10;       &#10;        return parse_tree&#10;&#10;   &#10;# rm_main is a mandatory function, &#10;# the number of arguments has to be the number of input ports (can be none)&#10;&#10;def rm_main(data):&#10;&#10;    svo = SVO()&#10;    sentencesList = data.values.tolist()&#10;    data1 = pandas.DataFrame()&#10;    data2 = pandas.DataFrame()&#10;    bigdata = pandas.DataFrame()&#10;    val = []&#10;  &#10;    try:&#10;        first_list = []&#10;        for i in range(0,len(sentencesList)):        &#10;            filtered_sentence = [] &#10;            first_col = sentencesList[i][0]            &#10;            second_col = sentencesList[i][1]&#10;            third_col = sentencesList[i][2]&#10;                 &#10;            j = sentencesList[i][2]            &#10;            sentences = svo.sentence_split(j)            &#10;&#10;            for i in range(0,len(sentences)):&#10;                result_1 = [[] for i in range(0,2)]&#10;                result_1[0] = first_col&#10;                result_1[1] = second_col&#10;                result_1[1] = third_col&#10;                first_list.append(result_1)&#10;&#10;            for sent in sentences:              &#10;#                print(&quot;Sent ==&gt; &quot;, sent)&#10;                root_tree = svo.get_parse_tree(sent)           &#10;                val.append(svo.process_parse_tree(next(root_tree)))&#10;                        &#10;        tagged_List = []&#10;        col=[] &#10;        emptyList = [[] for i in range(0,5)]        &#10;        for i in range(0,len(val)): &#10;            result = [[] for i in range(0,5)]                          &#10;                                 &#10;            if val[i]:                &#10;                col = list(val[i][0].keys())                &#10;                values = list(val[i][0].values())&#10;                                &#10;                for j in range(0, len(col)):                    &#10;                    if col[j] == 'subject' and values[j] != None:&#10;                        for k in range(0,len(values[j])):                           &#10;                            result[j]+=values[j][k]                                       &#10;                    if col[j] == 'predicate' and values[j] != None:&#10;                        for k in range(0,len(values[j])):&#10;                            result[j]+=values[j][k]&#10;                    if col[j] == 'object' and values[j] != None:&#10;                        for k in range(0,len(values[j])):&#10;                            result[j]+=values[j][k]&#10;                    if col[j] == 'adjective' and values[j] != None:&#10;                        for k in range(0,len(values[j])):&#10;                            result[j]+=values[j][k]&#10;                    if col[j] == 'adverb' and values[j] != None:&#10;                        for k in range(0,len(values[j])):&#10;                            result[j]+=values[j][k]                      &#10;            &#10;            if emptyList != result:&#10;                if result[0] == ['-RRB-'] or result[1] == ['-RRB-'] or result[2] == ['-RRB-'] or result[3] == ['-RRB-'] or result[4] == ['-RRB-']:&#10;                    print(&quot;Skip&quot;)&#10;                else:                    &#10;                    resultLst = []&#10;                    for i in result:                    &#10;                        if i == []:&#10;                            resultLst.append('')&#10;                        else:&#10;                            if len(i)==1:&#10;                                newlst = ','.join(i)&#10;                                resultLst.append(newlst)&#10;                            else:&#10;                                newJ =&quot;&quot;&#10;                                for j in i:&#10;                                    newJ += j + &quot;    &quot;                                &#10;                                resultLst.append(newJ) &#10;                                        &#10;                    tagged_List.append(resultLst)&#10;            &#10;                      &#10;        data1 = pandas.DataFrame(first_list)&#10;        data1.columns =['Area', 'Use case']                                           &#10;        data2 = pandas.DataFrame(tagged_List)&#10;        data2.columns =['subject', 'predicate', 'object', 'adjective', 'adverb']                                  &#10;&#10;        bigdata = pandas.concat([data1, data2], axis=1) &#10;    except Exception as e:&#10;        print(&quot;Exception in main &quot;, e ) &#10;     &#10;    return  bigdata&#10;"/>
      </operator>
      <operator activated="true" class="write_csv" compatibility="8.2.000" expanded="true" height="82" name="Write CSV (3)" width="90" x="380" y="85">
        <parameter key="csv_file" value="D:\SVO_Output2_1.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="false"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="SYSTEM"/>
      </operator>
      <operator activated="true" class="read_csv" compatibility="8.2.000" expanded="true" height="68" name="Read CSV" width="90" x="45" y="289">
        <parameter key="csv_file" value="D:\work\docs\City of Aspen Appendix E_CSV.csv"/>
        <parameter key="column_separators" value=","/>
        <parameter key="trim_lines" value="false"/>
        <parameter key="use_quotes" value="true"/>
        <parameter key="quotes_character" value="&quot;"/>
        <parameter key="escape_character" value="\"/>
        <parameter key="skip_comments" value="false"/>
        <parameter key="comment_characters" value="#"/>
        <parameter key="parse_numbers" value="true"/>
        <parameter key="decimal_character" value="."/>
        <parameter key="grouped_digits" value="false"/>
        <parameter key="grouping_character" value=","/>
        <parameter key="date_format" value=""/>
        <parameter key="first_row_as_names" value="true"/>
        <list key="annotations"/>
        <parameter key="time_zone" value="SYSTEM"/>
        <parameter key="locale" value="English (United States)"/>
        <parameter key="encoding" value="SYSTEM"/>
        <parameter key="read_all_values_as_polynominal" value="false"/>
        <list key="data_set_meta_data_information"/>
        <parameter key="read_not_matching_values_as_missings" value="true"/>
        <parameter key="datamanagement" value="double_array"/>
        <parameter key="data_management" value="auto"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="7.4.000" expanded="true" height="82" name="Execute Python (4)" width="90" x="179" y="289">
        <parameter key="script" value="import pandas&#10;import nltk&#10;from nltk.tree import *&#10;import nltk.data&#10;import nltk.draw&#10;&#10;import math&#10;import os&#10;import sys&#10;import parser&#10;import numpy as np&#10;&#10;from nltk import pos_tag&#10;from nltk.corpus import stopwords&#10;from nltk import sent_tokenize, word_tokenize&#10;&#10;from nltk.internals import find_jars_within_path&#10;from nltk.parse.stanford import StanfordParser&#10;&#10;stop_words = set(stopwords.words('english'))&#10;stop_words.add('ability')&#10;stop_words.add('Ability')&#10;stop_words.add('\'s')&#10;stop_words.add('etc.')&#10;stop_words.add('e.g.')&#10;stop_words.add('i.e.')&#10;&#10;   &#10;class SVO(object):&#10;    &quot;&quot;&quot;&#10;    Class Methods to Extract Subject Verb Object Tuples from a Sentence&#10;    &quot;&quot;&quot;&#10;        &#10;    def __init__(self):&#10;        &quot;&quot;&quot;&#10;        Initialize the SVO Methods&#10;        &quot;&quot;&quot;&#10;        &#10;        self.noun_types = [&quot;NN&quot;, &quot;NNP&quot;, &quot;NNPS&quot;,&quot;NNS&quot;,&quot;PRP&quot;]&#10;        self.verb_types = [&quot;VB&quot;,&quot;VBD&quot;,&quot;VBG&quot;,&quot;VBN&quot;, &quot;VBP&quot;, &quot;VBZ&quot;]&#10;        self.adjective_types = [&quot;JJ&quot;,&quot;JJR&quot;,&quot;JJS&quot;]&#10;        self.adverb_types = [&quot;RB&quot;,&quot;RBR&quot;,&quot;RBS&quot;,&quot;RP&quot;]&#10;        self.conjunction_types = [&quot;CC&quot;]&#10;        self.pred_verb_phrase_siblings = None&#10;        self.parser = StanfordParser()&#10;        self.sent_detector = nltk.data.load('tokenizers/punkt/english.pickle')&#10;        &#10;&#10;    def get_attributes(self, node, parent_node, parent_node_siblings):&#10;        &quot;&quot;&quot;&#10;        returns the Attributes for a Node&#10;        &quot;&quot;&quot;  &#10;                     &#10;&#10;    def get_subject(self, sub_tree):&#10;        &quot;&quot;&quot;&#10;        Returns the Subject and all attributes for a subject, sub_tree is a Noun Phrase&#10;        &quot;&quot;&quot;&#10;        sub_nodes = []&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        subject = []&#10;&#10;        for each in sub_nodes:&#10;            if each.label() in self.noun_types:&#10;                leaves = each.leaves()&#10;                for sub in leaves:&#10;                    if sub not in stop_words:&#10;                        subject.append(each.leaves())&#10;                break&#10;&#10;        return {'subject':subject}&#10;&#10;    def get_object(self, sub_tree):&#10;        &quot;&quot;&quot;&#10;        Returns an Object with all attributes of an object&#10;        &quot;&quot;&quot;&#10;        sub_nodes = []&#10;        siblings = self.pred_verb_phrase_siblings&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        Object = []&#10;        adjective = []&#10;&#10;        for each in sub_nodes:&#10;            if each.label() in self.noun_types:&#10;                leaves = each.leaves()&#10;                for obj in leaves:&#10;                    if obj not in stop_words:&#10;                        Object.append(each.leaves())&#10;                break&#10;       &#10;        self.pred_verb_phrase_siblings = None&#10;        return {'object':Object}&#10;    &#10;    def get_adverb(self, sub_tree):&#10;        &quot;&quot;&quot;&#10;        Returns the Adverb and all its attributes&#10;        &quot;&quot;&quot;&#10;        sub_nodes = []&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        adverb = []&#10;&#10;        for each in sub_nodes:&#10;            if each.label() in self.adverb_types:&#10;                leaves = each.leaves()&#10;                for sub in leaves:&#10;                    if sub not in stop_words:                        &#10;                        adverb.append(each.leaves())&#10;                break&#10;        &#10;        return {'adverb':adverb}&#10;        &#10;    def get_adjective(self, sub_tree):&#10;        &quot;&quot;&quot;&#10;        Returns an Adjective with all its attributes.&#10;        &quot;&quot;&quot;&#10;        sub_nodes = []&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        adjective = []&#10;&#10;        for each in sub_nodes:&#10;            if each.label() in self.adjective_types:&#10;                leaves = each.leaves()&#10;                for obj in leaves:&#10;                    if obj not in stop_words:&#10;                        if each.leaves() not in adjective:&#10;                           adjective.append(each.leaves())&#10;                break&#10;  &#10;        return {'adjective':adjective}&#10;    &#10;    def get_predicate(self, sub_tree , adjective):&#10;        &quot;&quot;&quot;&#10;        Returns the Verb along with its attributes, Also returns a Verb Phrase&#10;        &quot;&quot;&quot;&#10;&#10;        sub_nodes = []&#10;        sub_nodes = sub_tree.subtrees()&#10;        sub_nodes = [each for each in sub_nodes if each.pos()]&#10;        predicate = []&#10;        adj = []&#10;        pred_verb_phrase_siblings = []&#10;        sub_tree  = ParentedTree.convert(sub_tree)&#10;        for each in sub_nodes:&#10;            if each.label() in self.verb_types:&#10;                sub_tree  = each&#10;                leaves = each.leaves()&#10;                for pre in leaves:&#10;                    if pre not in stop_words:&#10;                        predicate.append(each.leaves())&#10;            else:&#10;                if each.label() in self.adjective_types:&#10;                    sub_tree  = each                    &#10;                    adj1 = self.get_adjective(sub_tree)                    &#10;                    if adj1['adjective'] != []:&#10;                        adj.append(adj1['adjective'])       &#10;        &#10;        #get all predicate_verb_phrase_siblings to be able to get the object&#10;        sub_tree  = ParentedTree.convert(sub_tree)&#10;        if predicate:&#10;             pred_verb_phrase_siblings = self.tree_root.subtrees()&#10;             pred_verb_phrase_siblings = [each for each in pred_verb_phrase_siblings if each.label() in [&quot;NP&quot;,&quot;PP&quot;,&quot;ADJP&quot;,&quot;ADVP&quot;]]&#10;             self.pred_verb_phrase_siblings = pred_verb_phrase_siblings&#10;        &#10;        return {'predicate':predicate }, adj&#10;&#10;    def process_parse_tree(self, parse_tree):&#10;        &quot;&quot;&quot;&#10;        Returns the Subject-Verb-Object Representation of a Parse Tree.&#10;        Can Vary depending on number of 'sub-sentences' in a Parse Tree&#10;        &quot;&quot;&quot;&#10;        &#10;        self.tree_root = parse_tree&#10;        # Step 1 - Extract all the parse trees that start with 'S'&#10;        output_list = []     &#10;        output_dict = {}&#10;        &#10;        subject = {}&#10;        predicate = {}&#10;        Object = {}&#10;        adjective = {}&#10;        adverb ={}&#10;&#10;        for idx, subtree in enumerate(parse_tree[0].subtrees()):&#10;#            subtree.draw()      # show parse_tree of each sentence and subtree. &#10;               &#10;            if subtree.label() in [&quot;S&quot;, &quot;SQ&quot;, &quot;SBAR&quot;, &quot;SBARQ&quot;, &quot;SINV&quot;, &quot;FRAG&quot;]:&#10;                children_list = subtree&#10;                children_values = [each_child.label() for each_child in children_list]&#10;                children_dict = dict(zip(children_values,children_list))&#10;                subjct = {}&#10;                pre = {}&#10;                obj = {}                      &#10;                &#10;                # Extract Subject, Verb-Phrase, Objects, Adjective, Adverb from Sentence sub-trees&#10;                if children_dict.get(&quot;NP&quot;) is not None:                &#10;                    subjct = self.get_subject(children_dict[&quot;NP&quot;])&#10;                    if subjct:                       &#10;                        if subject == {} :&#10;                            subject.update({'subject':subjct['subject']})                       &#10;                        elif subject['subject']:                            &#10;                            UniqueSub = []                            &#10;                            for val in subjct['subject']:                                &#10;                                if val not in UniqueSub:                                &#10;                                    UniqueSub.append(val)&#10;                            &#10;                            for value in UniqueSub:                            &#10;                                if value not in subject['subject']:                                &#10;                                    subject['subject'].append(value)                        &#10;                        else:                            &#10;                            subject.update({'subject':subjct['subject']}) &#10;                                                               &#10;#                    print(&quot;Process Subject &quot;, subject)&#10;                    &#10;                    adjective = self.get_adjective(children_dict[&quot;NP&quot;])                         &#10;&#10;                if children_dict.get(&quot;VP&quot;) is not None:&#10;                                       &#10;                    pre, adj = self.get_predicate(children_dict[&quot;VP&quot;], adjective )                    &#10;                    if pre:                        &#10;                        UniquePre = []&#10;                        for val in pre['predicate']:                            &#10;                            if val not in UniquePre:                                &#10;                                UniquePre.append(val)                       &#10;                    &#10;                        if predicate == {}:&#10;                            predicate.update({'predicate': UniquePre})&#10;                        elif predicate['predicate']:&#10;                            for value in UniquePre:                                &#10;                                if value not in predicate['predicate']:                                        &#10;                                    predicate['predicate'].append(value)&#10;                        else:&#10;                            predicate.update({'predicate':UniquePre })                        &#10;                                     &#10;                    if adj:&#10;                        flattened = []&#10;                        for sublist in adj:&#10;                            for val in sublist:                                &#10;                                if val not in flattened:                                &#10;                                    flattened.append(val)                        &#10;                                                        &#10;                        if adjective == {}:                                               &#10;                            adjective.update({'adjective':flattened})&#10;                        elif adjective['adjective']:                           &#10;                            for value in flattened:  &#10;                                if value not in adjective['adjective']:                                    &#10;                                    adjective['adjective'].append(value)                           &#10;                        else:                           &#10;                            adjective.update({'adjective':flattened})&#10;                                            &#10;#                    print(&quot;Process predicate &quot;, predicate)&#10;#                    print(&quot;Process Adjective &quot;, adjective)&#10;                    &#10;                    obj = self.get_object(children_dict[&quot;VP&quot;])&#10;                    if obj:&#10;                        if Object == {}:&#10;                            Object.update({'object': obj['object']})&#10;                        elif Object['object']:&#10;                            UniqueObj = []                            &#10;                            for val in obj['object']:                                &#10;                                if val not in UniqueObj:                                &#10;                                    UniqueObj.append(val)&#10;                            for value in UniqueObj:                                &#10;                                if value not in Object['object']:                                        &#10;                                    Object['object'].append(value)                                      &#10;                        else:                            &#10;                            Object.update({'object': obj['object']})&#10;                    &#10;#                    print(&quot;Process Object &quot;, Object)&#10;                     &#10;                    adverb = self.get_adverb(children_dict[&quot;VP&quot;])&#10;#                    print(&quot;Process adverb &quot;, adverb)       &#10;             &#10;            try:                                                          &#10;                if subject :&#10;                    output_dict['subject'] = subject['subject']&#10;                else:&#10;                    output_dict['subject'] = &quot;&quot;                                                             &#10;                                   &#10;                if predicate:&#10;                    output_dict['predicate'] = predicate['predicate']                     &#10;              &#10;                if Object:                     &#10;                    output_dict['object'] = Object['object']                 &#10;                     &#10;                if adjective:            &#10;                    output_dict['adjective'] = adjective['adjective']&#10;&#10;                if adverb:            &#10;                    output_dict['adverb'] = adverb['adverb']               &#10;             &#10;                output_list.append(output_dict)&#10;                  &#10;            except Exception as e:&#10;                    print(&quot;Exception&quot;, e )&#10;                    continue&#10;        &#10;            &#10;        return output_list&#10;&#10;    def traverse(self,t):&#10;        try:&#10;            t.label()&#10;        except AttributeError:&#10;            print(t)&#10;        else:&#10;            # Now we know that t.node is defined&#10;            print('(', t.label())&#10;            for child in t:&#10;                traverse(child)&#10;&#10;            print(')')&#10;&#10;    def sentence_split(self,text):&#10;        &quot;&quot;&quot;&#10;        returns the Parse Tree of a Sample&#10;        &quot;&quot;&quot;&#10;        sentences = self.sent_detector.tokenize(text)&#10;        return sentences&#10;&#10;    def get_parse_tree(self, sentence):&#10;        &quot;&quot;&quot;&#10;        returns the Parse Tree of a Sample&#10;        &quot;&quot;&quot;&#10;        parse_tree = self.parser.raw_parse(sentence)&#10;       &#10;        return parse_tree&#10;&#10;   &#10;# rm_main is a mandatory function, &#10;# the number of arguments has to be the number of input ports (can be none)&#10;&#10;def rm_main(data):&#10;&#10;    svo = SVO()&#10;    sentencesList = data.values.tolist()&#10;  &#10;    data1 = pandas.DataFrame()&#10;    data2 = pandas.DataFrame()&#10;    bigdata = pandas.DataFrame()&#10;    val = []&#10;  &#10;    try:&#10;        first_list = []&#10;        for i in range(0,len(sentencesList)):        &#10;            filtered_sentence = [] &#10;            first_col = sentencesList[i][0]            &#10;            second_col = sentencesList[i][1]&#10;            third_col = sentencesList[i][2]&#10;            &#10;            j = sentencesList[i][2]            &#10;            sentences = svo.sentence_split(j)            &#10;&#10;            for i in range(0,len(sentences)):&#10;                result_1 = [[] for i in range(0,2)]&#10;                result_1[0] = first_col&#10;                result_1[1] = second_col&#10;                result_1[1] = third_col&#10;                first_list.append(result_1)      &#10;                                            &#10;            for sent in sentences:              &#10;#                print(&quot;Sent ==&gt; &quot;, sent)&#10;                root_tree = svo.get_parse_tree(sent)           &#10;                val.append(svo.process_parse_tree(next(root_tree)))&#10;        &#10;        tagged_List = []&#10;        col=[] &#10;        emptyList = [[] for i in range(0,5)]        &#10;        for i in range(0,len(val)): &#10;            result = [[] for i in range(0,5)]                          &#10;                                 &#10;            if val[i]:                &#10;                col = list(val[i][0].keys())                &#10;                values = list(val[i][0].values())&#10;                                &#10;                for j in range(0, len(col)):                    &#10;                    if col[j] == 'subject' and values[j] != None:&#10;                        for k in range(0,len(values[j])):                           &#10;                            result[j]+=values[j][k]                                       &#10;                    if col[j] == 'predicate' and values[j] != None:&#10;                        for k in range(0,len(values[j])):&#10;                            result[j]+=values[j][k]&#10;                    if col[j] == 'object' and values[j] != None:&#10;                        for k in range(0,len(values[j])):&#10;                            result[j]+=values[j][k]&#10;                    if col[j] == 'adjective' and values[j] != None:&#10;                        for k in range(0,len(values[j])):&#10;                            result[j]+=values[j][k]&#10;                    if col[j] == 'adverb' and values[j] != None:&#10;                        for k in range(0,len(values[j])):&#10;                            result[j]+=values[j][k]                      &#10;            &#10;            if emptyList != result:&#10;                if result[0] == ['-RRB-'] or result[1] == ['-RRB-'] or result[2] == ['-RRB-'] or result[3] == ['-RRB-'] or result[4] == ['-RRB-']:&#10;                    print(&quot;Skip&quot;)&#10;                else:&#10;                    resultLst = []&#10;                    for i in result:                    &#10;                        if i == []:&#10;                            resultLst.append('')&#10;                        else:&#10;                            if len(i)==1:&#10;                                newlst = ','.join(i)&#10;                                resultLst.append(newlst)&#10;                            else:&#10;                                newJ =&quot;&quot;&#10;                                for j in i:&#10;                                    newJ += j + &quot;    &quot;                                &#10;                                resultLst.append(newJ) &#10;                                        &#10;                    tagged_List.append(resultLst)&#10;            &#10;                      &#10;        data1 = pandas.DataFrame(first_list)&#10;        data1.columns =['Area', 'Use case']                                           &#10;        data2 = pandas.DataFrame(tagged_List)&#10;        data2.columns =['subject', 'predicate', 'object', 'adjective', 'adverb']                                  &#10;&#10;        bigdata = pandas.concat([data1, data2], axis=1) &#10;    except Exception as e:&#10;        print(&quot;Exception in main &quot;, e ) &#10;     &#10;    return  bigdata&#10;"/>
      </operator>
      <operator activated="true" class="write_csv" compatibility="8.2.000" expanded="true" height="82" name="Write CSV (2)" width="90" x="380" y="289">
        <parameter key="csv_file" value="D:\SVO_Output2.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="false"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="SYSTEM"/>
      </operator>
      <connect from_op="Read Excel" from_port="output" to_op="Execute Python (2)" to_port="input 1"/>
      <connect from_op="Execute Python (2)" from_port="output 1" to_op="Write CSV (3)" to_port="input"/>
      <connect from_op="Write CSV (3)" from_port="through" to_port="result 1"/>
      <connect from_op="Read CSV" from_port="output" to_op="Execute Python (4)" to_port="input 1"/>
      <connect from_op="Execute Python (4)" from_port="output 1" to_op="Write CSV (2)" to_port="input"/>
      <connect from_op="Write CSV (2)" from_port="through" to_port="result 2"/>
      <portSpacing port="source_input 1" spacing="0"/>
      <portSpacing port="sink_result 1" spacing="0"/>
      <portSpacing port="sink_result 2" spacing="0"/>
      <portSpacing port="sink_result 3" spacing="0"/>
    </process>
  </operator>
</process>
